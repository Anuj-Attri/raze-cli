
from __future__ import annotations
from typing import Dict, Any

def suggest_node_reasoning(kind: str, payload: Dict[str, Any]) -> dict:
    """
    Return a stub reasoning block. Replace with GPT-OSS JSON later.
    """
    if kind == "duplicate_cluster":
        count = len(payload.get("file_ids", []))
        return {"rationale": f"Exact duplicate content detected across {count} files (same sha256).",
                "confidence": 0.95}
    if kind == "type_cluster":
        t = payload.get("type")
        n = len(payload.get("file_ids", []))
        return {"rationale": f"Files grouped by coarse type '{t}' for bulk actions and policy attachment. ({n} items)",
                "confidence": 0.7}
    if kind == "age_bucket":
        label = payload.get("label")
        n = len(payload.get("file_ids", []))
        return {"rationale": f"Files in age bucket '{label}'. Old/stale buckets are strong candidates for tiering or deletion with review. ({n} items)",
                "confidence": 0.6}
    return {"rationale": "Cluster generated by heuristic rules.", "confidence": 0.5}
